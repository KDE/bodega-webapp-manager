extends ../layout
block head

  title Your assets
  link(rel="stylesheet", href="/css/ext-all.css")
  script(src='/js/ext-all.js')

  include createAssetForm.js

  script
    Ext.tip.QuickTipManager.init();

    Ext.onReady(function() {

        var extraFields = [{
                xtype: 'textfield',
                id: 'obsInfo[pkgName]',
                name: 'obsInfo[pkgName]',
                fieldLabel: 'Package name',
                allowBlank: false
            }, {
                xtype: 'textfield',
                id: 'obsInfo[arch]',
                name: 'obsInfo[arch]',
                fieldLabel: 'Architecture',
                allowBlank: false
            }, {
                xtype: 'textfield',
                id: 'obsInfo[repoName]',
                name: 'obsInfo[repoName]',
                fieldLabel: 'Repository name',
                allowBlank: false
            }, {
                xtype: 'hidden',
                name: 'info[tags][100][type]',
                value: 'mimetype'
            }, {
                xtype: 'hidden',
                name: 'info[tags][100][title]',
                value: 'application/x-rpm'
            }];


        var form = createAssetForm(extraFields, 'application');

        var beforeaction = function(extForm, action, eOpts) {

            var extraFieldsParent = Ext.getCmp('extraFields');
            var imageSpecificFields = Ext.getCmp('imageSpecificFields');

            var pkgName = extraFieldsParent.items.get('obsInfo[pkgName]').getValue();
            var version = form.items.get('version').getValue();
            var arch = extraFieldsParent.items.get('obsInfo[arch]').getValue();
            var repoName = extraFieldsParent.items.get('obsInfo[repoName]').getValue();

            var obsFileParts = ['{"package": "' + pkgName + '", "architecture": "' + arch + '", "repository": "' + repoName + '"}'];
            var obsFileBlob = new Blob(obsFileParts, { "type" : "text\/plain" });


            formData = new FormData(),
            request = new XMLHttpRequest();

            for (var i in extForm.getFieldValues()) {
                formData.append(i, extForm.getFieldValues()[i]);
            }
            formData.append('info[file]', pkgName + '.desc');
            formData.append('asset', obsFileBlob, pkgName + '.desc');

            var imgUploadFields = imageSpecificFields.items.filterBy(function(f) {
                return f.value && f.xtype == 'filefield';
            });
            for (var f in imgUploadFields.items) {
                formData.append(imgUploadFields.items[f].name, imgUploadFields.items[f].fileInputEl.dom.files[0]);
            }

            request.open(
                        "POST",
                        "/json/asset/create",
                        true
                    );
            request.onreadystatechange = function() {
                if (request.readyState == 4 && request.status == 200) {
                    window.location.href = "/asset/list/incoming";
                }
            }
            request.send(formData);

            return false;
        }

        form.getForm().addListener('beforeaction', beforeaction, form);
        form.items.get('asset').disable();
        form.items.get('asset').allowBlank = true;
        form.items.get('asset').hide();

        var panel = Ext.create('Ext.Panel', {
            collapsible: false,
            region: 'center',
            overflowY: 'auto',
            title: "#{readableAssetType}",
            dockedItems: [createToolBar()],
            items: [form]
        });

        var layout = Ext.create('Ext.Viewport', {
            layout:'border',
            bodyBorder: false,
            padding: '48 0 0 0',
            bodyStyle: 'width:100%',
            items: [panel],
            renderTo: Ext.getBody(),
            border: 0
        });
    });

block body
  .title
    <br/>
    include ../navigator
    .container-fluid
