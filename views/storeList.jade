extends layout
block head

  title Your assets
  link(rel="stylesheet", href="/css/ext-all.css")
  script(src='/js/ext-all.js')
  script(src='/js/AssetCellFieldDropZone.js')

  include tagList.js
  include assetTags.js
  include channelList.js
  include storeCreationForm.js

  script.
    Ext.onReady(function() {
        var store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            storeId:'bodegaStore',
            fields:['id', 'name', 'desc', 'markups.min', 'markups.max', 'markups.markup'],
            proxy: {
                type: 'ajax',
                url: '/json/store/list',
                reader: {
                    type: 'json',
                    root: 'storeInfo'
                },
                writer: {
                    type: 'json',
                    writeAllFields: false,
                    root: 'storeInfo'
                }
            },
            listeners: {
                write: function(proxy, operation) {
                    //console.log(operation);
                    if (operation.action == 'destroy') {
                        main.child('#form').setActiveRecord(null);
                    }
                    Ext.example.msg(operation.action, operation.resultSet.message);
                },
                update: function(store, record, operation, eOpts ) {
                    record.raw.name = record.data.name;
                    record.raw.desc = record.data.desc;
                    record.raw.markup = record.data['markups.markup'];
                    record.raw.maxmarkup = record.data['markups.max'];
                    record.raw.minmarkup = record.data['markups.min'];

                    Ext.Ajax.request({
                        url: '/json/store/update/' + record.raw.id,
                        method: 'POST',
                        params: $.param(record.raw),
                        callback: function(response) {
                            store.reload();
                            store.reload();
                        }
                    });
                }
            }
            
        });

        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit: 1,
            listeners: {
                beforeedit: function(edit, opt) {
                    if (opt.field === 'id') {
                        return false;
                    }
                }
            }
        });

        var view = Ext.create('Ext.grid.Panel', {
            store: Ext.data.StoreManager.lookup('bodegaStore'),
            selType: 'checkboxmodel',
            inline: true,
            columns: [
                { header: 'ID',  dataIndex: 'id'},
                { header: 'Name',  dataIndex: 'name', field: {allowBlank: false}},
                { header: 'Description', dataIndex: 'desc', flex: 1, field: {allowBlank: false}},
                { header: 'Min markup', dataIndex: 'markups.min', field: {allowBlank: false}},
                { header: 'Max markup', dataIndex: 'markups.max', field: {xtype: 'numberfield', allowBlank: false}},
                { header: 'Markup', dataIndex: 'markups.markup', field: {xtype: 'numberfield', allowBlank: false}},
                {
                    xtype: 'actioncolumn',
                    width: 50,
                    items: [{
                        icon: '/css/edit.png',
                        tooltip: 'Edit channels',
                        handler: function(grid, rowIndex, colIndex) {
                            channelList(store.getAt(rowIndex).data);
                        }
                    }]
                }
            ],
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'top',
                items: [{
                    text: 'New Store',
                    scope: this,
                    handler: function(){
                        showStoreCreationForm(store);
                    }
                }, 'Search', {
                    xtype: 'textfield',
                    name: 'searchField',
                    hideLabel: true,
                    width: 200,
                    listeners: {
                        change: {
                            fn: function(){
                                store.clearFilter();

                                var search = view.down('textfield[name=searchField]').getValue();
                                store.filterBy(function (record) {
                                    //name containing the textfield value
                                    var name = record.get('name').toLowerCase();
                                    var desc = record.get('desc').toLowerCase();
                                    return name.indexOf(search) !== -1 || desc.indexOf(search) !== -1;
                               });
                            },
                            scope: this,
                            buffer: 100
                        }
                    }
                }, {
                    xtype: 'button',
                    text: 'Delete stores',
                    hidden: true,
                    handler: function() {
                        Ext.MessageBox.confirm('Delete', 'Are you sure you want to delete the selected items?', function(btn){
                            if(btn === 'yes'){
                                var s = view.getSelectionModel().getSelection();
                                selected = [];
                                Ext.each(s, function (item) {
                                    Ext.Ajax.request({
                                        url: '/json/store/delete/' + item.data.id,
                                        callback: function(response) {
                                            store.load();
                                        }
                                    });
                                });
                            }
                        });
                    }
                }]
            }],
            listeners: {
                selectionchange: function() {
                    var s = view.getSelectionModel().getSelection();
                    if (s.length > 0) {
                        view.dockedItems.get(1).items.get(3).show();
                    } else {
                        view.dockedItems.get(1).items.get(3).hide();
                    }
                }
            },
            columnWidth: 1,
            border: 0,
            plugins: [cellEditing]
        });

        var layout = Ext.create('Ext.Viewport', {
            width: '100%',
            layout:'column',
            padding: '48 0 0 0',
            items: [view],
            renderTo: Ext.getBody(),
            border: 0
        });
    });


block body
  .title
    <br/>
    include navigator
    .container-fluid
      .row-fluid
        
