extends layout
block head
  link(rel="stylesheet", href="/css/nv.d3.css")

  Sale statistics for your #{network} Account
  script(src='/js/nvd3/d3.v3.js')
  script(src='/js/nvd3/nv.d3.min.js')
  script(src='/js/nvd3/utils.js')
  script(src='/js/nvd3/models/axis.js')
  script(src='/js/nvd3/tooltip.js')
  script(src='/js/nvd3/models/legend.js')
  script(src='/js/nvd3/models/axis.js')
  script(src='/js/nvd3/models/scatter.js')
  script(src='/js/nvd3/models/stackedArea.js')
  script(src='/js/nvd3/models/stackedAreaChart.js')
  script
  
    var graphData = new Array();
    var assets = new Array();
    var chart;
    var granularity = "month"
    var metric = "points";

    function convertData(data) {
        var converted = new Array();
        for (var property in data[0]) {
            if (property == 'dateof') {
                continue;
            }
            var row = {key: property, values: []};
            for (var i = 0; i < data.length; ++i) {
                row.values.push([new Date(data[i].dateof).getTime(), data[i][property]])
            }
            converted.push(row);
        }
        return converted;
    }

    var generateGraph = function() {
        var chart = nv.models.stackedAreaChart()
                        .x(function(d) { return d[0] })
                        .y(function(d) { return d[1] })
                        .clipEdge(true);

        chart.xAxis
            .showMaxMin(false)
            .tickFormat(function(d) { return d3.time.format('%x')(new Date(d)) });

        chart.yAxis
            .tickFormat(d3.format(',.2f'));

        d3.select('#chart svg')
            .datum(graphData)
            .transition().duration(500).call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
    }

    redrawGraph = function(url) {
        d3.json(url, function(error, data) {
            if (error) return console.warn(error);
            graphData = convertData(data.stats);
            generateGraph();
        });
    };
    
    function refresh() {
        redrawGraph("/json/stats/assets?" + $.param({"assets": assets, "granularity": granularity, "metric": metric}, true))
    }

    function toggleAsset(asset) {
        if (assets.indexOf(asset) === -1) {
            assets.push(asset);
        } else {
            assets.splice(assets.indexOf(asset), 1);
        }
        refresh();
    }

    function setGranularity(gran) {
        granularity = gran
        refresh();
    }

    function setMetric(m) {
        metric = m
        refresh();
    }

    redrawGraph("/json/stats/assets");


block body
  .title
    h1(align="center") Statistics  #{network}
    include navigator
    .container-fluid
      .row-fluid
        <div id="chart">
        <svg style="height:500px"></svg>
        </div>
        <a onclick='redrawGraph("/json/stats/assets")'>Total</p>
        <a onclick='toggleAsset(2)'>Asset 2</p>
        <a onclick='toggleAsset(3)'>Asset 3</p>
        <a onclick='toggleAsset(4)'>Asset 4</p>
        <a onclick='toggleAsset(5)'>Asset 5</p>
        <a onclick='setGranularity("month")'>Month</p>
        <a onclick='setGranularity("year")'>Year</p>
        <a onclick='setGranularity("day")'>Day</p>
        <a onclick='setMetric("points")'>Points</p>
        <a onclick='setMetric("count")'>Count</p>
        <a onclick='setMetric("downloads")'>Downloads</p>
