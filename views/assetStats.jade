extends layout
block head
  link(rel="stylesheet", href="/css/nv.d3.css")

  title Sale statistics for your #{network} Account

  link(rel="stylesheet", href="/css/ext-all.css")
  script(src='/js/ext-all.js')

  script(src='/js/nvd3/d3.v2.min.js')
  script(src='/js/nvd3/nv.d3.min.js')
  script(src='/js/nvd3/utils.js')
  script(src='/js/nvd3/models/axis.js')
  script(src='/js/nvd3/tooltip.js')
  script(src='/js/nvd3/models/legend.js')
  script(src='/js/nvd3/models/axis.js')
  script(src='/js/nvd3/models/scatter.js')
  script(src='/js/nvd3/models/stackedArea.js')
  script(src='/js/nvd3/models/stackedAreaChart.js')
  script
  
    var graphData = new Array();
    var assets = new Array();
    var chart;
    var granularity = "month"
    var metric = "points";
    var from = (new Date(new Date().getFullYear()-1, new Date().getMonth(), new Date().getDay()));
    var to = new Date();

    function convertData(data) {
        var converted = new Array();
        for (var property in data[0]) {
            if (property == 'dateof') {
                continue;
            }
            var row = {key: property, values: []};
            for (var i = 0; i < data.length; ++i) {
                row.values.push([new Date(data[i].dateof).getTime(), data[i][property]])
            }
            converted.push(row);
        }
        return converted;
    }

    var generateGraph = function() {
        var chart = nv.models.stackedAreaChart()
                        .x(function(d) { return d[0] })
                        .y(function(d) { return d[1] })
                        .clipEdge(true);

        chart.xAxis
            .showMaxMin(false)
            .tickFormat(function(d) { return d3.time.format('%x')(new Date(d)) });

        chart.yAxis
            .tickFormat(d3.format(',.2f'));

        d3.select('#chart svg')
            .datum(graphData)
            .transition().duration(500).call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
    }

    redrawGraph = function(url) {
        d3.json(url, function( data) {
            // if (error) return console.warn(error);
            //FIXME: d3.v2 doesn't have error, v3 seems to have mouse input broken
            graphData = convertData(data.stats);
            generateGraph();
        });
    };

    function refresh() {
        redrawGraph("/json/stats/assets/" + metric + "?" + $.param({"assets": assets, "granularity": granularity, "from": from, "to": to}, true))
    }

    function reset() {
        assets = new Array();
        granularity = "month"
        metric = "points";
        refresh();
    }

    function toggleAsset(asset) {
        if (assets.indexOf(asset) === -1) {
            assets.push(asset);
        } else {
            assets.splice(assets.indexOf(asset), 1);
        }
        refresh();
    }

    function setGranularity(gran) {
        granularity = gran
        refresh();
    }

    function setMetric(m) {
        metric = m
        refresh();
    }

    var graphArea = Ext.create('Ext.panel.Panel', {
            html: '<div id="chart"><svg style="height:500px"></svg></div>',
            columnWidth: 0.8,
            border: 0,
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'top',
                items: ['Granularity:', {
                    xtype: 'combobox',
                    emptyText: 'Month',
                    editable: false,
                    store: Ext.create('Ext.data.Store', {
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Day', 'value': 'day'},
                            {'name': 'Month', 'value': 'month'},
                            {'name': 'Year', 'value': 'year'}
                            ]
                    }),
                    queryMode: 'local',
                    displayField: 'name',
                    valueField: 'value',
                    listeners:{
                        'select': function(combo, record, index) {
                            setGranularity(combo.getValue());
                        }
                    },
                    width: 100,
                    height: 22
                }, 'Metric:', {
                    xtype: 'combobox',
                    emptyText: 'Points',
                    editable: false,
                    store: Ext.create('Ext.data.Store', {
                        fields: ['name', 'value'],
                        data: [{'name': 'Points', 'value': 'points'},
                            {'name': 'Units sold', 'value': 'count'},
                            {'name': 'Downloads', 'value': 'downloads'}]
                    }),
                    queryMode: 'local',
                    displayField: 'name',
                    valueField: 'value',
                    listeners:{
                        'select': function(combo, record, index) {
                            setMetric(combo.getValue());
                        }
                    },
                    width: 100,
                    height: 22
                }]
            },{
                xtype: 'toolbar',
                dock: 'bottom',
                items: ['From:', {
                    xtype: 'datepicker',
                    value: (new Date(new Date().getFullYear()-1, new Date().getMonth(), new Date().getDay())),
                    handler: function(picker, date) {
                        graphArea.dockedItems.get(1).items.get(3).setMinDate(date);
                        from = date;
                        refresh();
                    }
                }, 'To:', {
                    xtype: 'datepicker',
                    handler: function(picker, date) {
                        graphArea.dockedItems.get(1).items.get(1).setMaxDate(date);
                        to = date;
                        refresh();
                    }
                }]
            }]
        });

    refresh();

    //Assets list
    Ext.onReady(function() {
        var store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            storeId:'bodegaStore',
            fields:['name', 'description', 'baseprice'],
            proxy: {
                type: 'ajax',
                // load remote data using HTTP
                url: '/json/asset/list',
                // specify a XmlReader (coincides with the XML format of the returned data)
                reader: {
                    type: 'json',
                    root: 'assets'
                }
            }
        });

        var view = Ext.create('Ext.grid.Panel', {
            store: Ext.data.StoreManager.lookup('bodegaStore'),
            selType: 'checkboxmodel',
            columns: [
                { header: 'Name',  dataIndex: 'name', flex: 1 },
            ],
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'top',
                items: [{
                    xtype: 'textfield',
                    name: 'searchField',
                    hideLabel: true,
                    width: 200,
                    listeners: {
                        change: {
                            fn: function(){
                                store.clearFilter();

                                var search = view.down('textfield[name=searchField]').getValue();
                                store.filterBy(function (record) {
                                    //name containing the textfield value
                                    var name = record.get('name').toLowerCase();
                                    var desc = record.get('description').toLowerCase();
                                    return name.indexOf(search) !== -1 || desc.indexOf(search) !== -1;
                               });
                            },
                            scope: this,
                            buffer: 100
                        }
                    }
                }]
            }],
            listeners: {
                selectionchange: function()
                {
                    assets = new Array();
                    var s = view.getSelectionModel().getSelection();
                    selected = [];
                    Ext.each(s, function (item) {
                        assets.push(item.data.id);
                    });
                    refresh();
                }
            },
            columnWidth: 0.2,
            border: 0
        });
        

        var layout = Ext.create('Ext.panel.Panel', {
            width: '100%',
            layout:'column',
            items: [graphArea, view],
            renderTo: Ext.getBody(),
            border: 0
        });
    });

block body
  .title
    h1(align="center") Statistics  #{network}
    include navigator
    .container-fluid
      .row-fluid

