extends layout
block head

  title Your assets
  link(rel="stylesheet", href="/css/ext-all.css")
  script(src='/js/ext-all.js')
  script(src='/js/AssetCellFieldDropZone.js')

  include collectionList.js
  include tagList.js
  include assetTags.js
  include assetforms/createAssetForm.js

  script
    var store;
    var currentType = '#{listType}';
    var currentPartner;

    function refreshAssetsStore() {
        store.proxy.url = '/json/asset/list/' + currentPartner + '/' + currentType;

        store.load();
    }

    var runner = new Ext.util.TaskRunner();
    var assetSearchTask = runner.newTask({
        query: '',
        run: function () {
            if (assetSearchTask.query && assetSearchTask.query.length > 3) {
                store.proxy.url = '/json/asset/list/' + currentPartner + '/' + currentType + '?query=*' + assetSearchTask.query + '*';
                store.reload();
            } else {
                refreshAssetsStore();
            }
        },
        interval: 600,
        repeat: 1
    });

    function postAsset(assetId) {
        Ext.Ajax.request({
            url: '/json/asset/post/' + assetId,
            method: 'POST',
            success: function(response, opts) {
                var resp = JSON.parse(response.responseText);
                if (resp.success) {
                    Ext.MessageBox.alert('', 'Publish request sent successfully.');
                } else {
                    Ext.MessageBox.alert('Error', 'Error in sending your request.<br/>' + (resp.message ? resp.message : resp.error.type));
                }
            },
            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
                Ext.MessageBox.alert('Error', 'Error in sending your request.');
            }
        });
    }

    var partnerStore = Ext.create('Ext.data.Store', {
            autoLoad: true,
            storeId: 'typeStore',
            fields:['id', 'name'],
            proxy: {
                type: 'ajax',
                url: '/json/partner/list',
                reader: {
                    type: 'json',
                    root: 'partners'
                }
            },
            listeners: {
                load: function ( store, records, successful, eOpts ) {
                    currentPartner = records[0].internalId;
                    partnerStore.combo.setValue(currentPartner);
                    refreshAssetsStore();
                }
            }
        });

    Ext.onReady(function() {
        store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            storeId:'bodegaStore',
            fields:['name', 'license', 'description', 'file', 'version', 'baseprice', 'tags', 'status', 'partner', 'active'],

            proxy: {
                type: 'ajax',
                // load remote data using HTTP
                url: '/json/asset/list/#{listType}',
                // specify a XmlReader (coincides with the XML format of the returned data)
                reader: {
                    type: 'json',
                    root: 'assets',
                    totalProperty: 'totalAssets'
                },
                writer: {
                    type: 'json',
                    writeAllFields: false,
                    root: 'assets'
                }
            },
            listeners: {
                write: function(proxy, operation) {
                    //console.log(operation);
                    if (operation.action == 'destroy') {
                        main.child('#form').setActiveRecord(null);
                    }
                    Ext.example.msg(operation.action, operation.resultSet.message);
                },
                update: function(store, record, operation, eOpts ) {
                    record.raw.name = record.data.name;
                    record.raw.description = record.data.description;
                    record.raw.baseprice = record.data.baseprice;
                    record.raw.posted = false;
                    //console.log(record.raw)
                    //console.log($.param({info: record.raw}))
                    Ext.Ajax.request({
                        url: '/json/asset/update/' + record.raw.id,
                        method: 'POST',
                        params: $.param({info: record.raw}),
                        success: function(response, opts) {
                            var resp = JSON.parse(response.responseText);
                            if (!resp.success) {
                                Ext.MessageBox.alert('Error', 'Error in modifying the asset.<br/>' + (resp.message ? resp.message : resp.error.type));
                            }
                        },
                        failure: function(response, opts) {
                            console.log('server-side failure with status code ' + response.status);
                            Ext.MessageBox.alert('Error', 'Error in modifying the asset.');
                        }
                    });
                }
            }
        });

        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit: 1,
            listeners: {
                beforeedit: function(edit, opt) {
                    if (opt.field === 'file') {
                        return false;
                    }
                }
            }
        });


        var view = Ext.create('Ext.grid.Panel', {
            store: Ext.data.StoreManager.lookup('bodegaStore'),
            selType: 'checkboxmodel',
            inline: true,
            columns: [
                { header: 'Name',  dataIndex: 'name', field: {allowBlank: false}},
                { header: 'Description', dataIndex: 'description', flex: 1, field: {allowBlank: false}},
                { header: 'File name', dataIndex: 'file', field: {allowBlank: false}},
                { header: 'Base price', dataIndex: 'baseprice', field: {xtype: 'numberfield', allowBlank: false}},
                {
                    header: 'Published',
                    dataIndex: 'status',
                    renderer: function(value, record) {
                        if (value === 'published') {
                            return Ext.String.format('<img src="/css/published-asset.png" alt="Yes"/>');
                        } else if (value === 'posted') {
                            return Ext.String.format('Pending');
                        } else {
                            return Ext.String.format('<a onClick="postAsset(\''+record.record.data.id+'\')">Request</a>', value);
                        }
                    }
                },
                {
                    xtype: 'actioncolumn',
                    width: 50,
                    items: [{
                        icon: '/css/edit.png',
                        tooltip: 'Edit Asset',
                        handler: function(grid, rowIndex, colIndex) {

                            var assetType;
                            var assetInfo = store.getAt(rowIndex).data;
                            for (var i = 0; i < assetInfo.tags.length; ++i) {

                                if (assetInfo.tags[i].type == 'assetType') {
                                    assetType = assetInfo.tags[i].title;
                                    break;
                                }
                            }
                            createAssetWindow([], assetType, store.getAt(rowIndex).data, '#{remoteUrl}');
                        }
                    }, {
                        icon: '/css/tags.png',
                        tooltip: 'Tags',
                        handler: function(grid, rowIndex, colIndex) {
                            loadAssetTags(store.getAt(rowIndex).data);
                        }
                    }]
                }
            ],
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'top',
                items: [{
                    text: 'Create Assets',
                    scope: this,
                    handler: function() {
                        window.location.href = "/asset/create";
                    }
                }, 'Search', {
                    xtype: 'textfield',
                    name: 'searchField',
                    hideLabel: true,
                    width: 200,
                    listeners: {
                       change: function( field, newValue, oldValue, eOpts ) {
                            assetSearchTask.query = newValue;
                            assetSearchTask.start();
                        }
                    }
                }, {
                    xtype: 'combobox',
                    editable: false,
                    queryMode: 'local',
                    displayField: 'name',
                    valueField: 'value',
                    width: 120,
                    value: '#{listType}',
                    store: Ext.create('Ext.data.Store', {
                        fields: ['name', 'value'],
                        data: [{'name': 'All assets', 'value': 'all'},
                            {'name': 'Published assets', 'value': 'published'},
                            {'name': 'Review pending', 'value': 'incoming'}],
                    }),
                    listeners: {
                        'select': function(combo, record, index) {
                            currentType = combo.getValue();
                            refreshAssetsStore();
                        }
                    }
                }, {
                    xtype: 'combobox',
                    editable: false,
                    queryMode: 'local',
                    displayField: 'name',
                    valueField: 'id',
                    width: 120,
                    //value: '#{listType}',
                    store: partnerStore,
                    listeners: {
                        'select': function(combo, record, index) {
                            currentPartner = combo.getValue();
                            assetSearchTask.start();
                        },
                        afterrender: function (combo, eopts) {
                            partnerStore.combo = combo;
                        }
                    }
                }, {
                    xtype: 'button',
                    text: 'Delete assets',
                    hidden: true,
                    handler: function() {
                        Ext.MessageBox.confirm('Delete', 'Are you sure you want to delete the selected items?', function(btn){
                            if(btn === 'yes'){
                                var s = view.getSelectionModel().getSelection();
                                selected = [];
                                Ext.each(s, function (item) {
                                    Ext.Ajax.request({
                                        url: '/json/asset/delete/' + item.data.id,
                                        callback: function(response) {
                                            store.load();
                                        }
                                    });
                                });
                            }
                        });
                    }
                }]
            },
            Ext.create('Ext.PagingToolbar', {
                    store: store,
                    dock: 'bottom',
                    displayInfo: true,
                    displayMsg: 'Displaying assets {0} - {1} of {2}',
                    emptyMsg: "No assets to display",
                   
            })
            ],
            listeners: {
                selectionchange: function()
                {
                    var s = view.getSelectionModel().getSelection();
                    if (s.length > 0) {
                        view.dockedItems.get(1).items.get(5).show();
                    } else {
                        view.dockedItems.get(1).items.get(5).hide();
                    }
                }
            },
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragGroup: 'viewDDGroup',
                    dropGroup: 'collectionListDDGroup'
                },
                listeners: {
                    drop: function(node, data, dropRec, dropPosition) {
                        var dropOn = dropRec ? ' ' + dropPosition + ' ' + dropRec.get('name') : ' on empty view';
                        Ext.example.msg("Drag from right to left", 'Dropped ' + data.records[0].get('name') + dropOn);
                    }
                }
            },
            columnWidth: 1,
            border: 0,
            region: 'center',
            plugins: [cellEditing]
        });

        var collectionList = createCollectionList();

        var collectionsPanel = {
            region: 'east',
            items: [collectionList],
            title: 'Collections',
            width: 300,
            split: true,
            collapsible: true,
            collapsed: true,
            floatable: false
        }

        var tagsPanel = createTagList();

        var layout = Ext.create('Ext.Viewport', {
            layout: 'border',
            bodyBorder: false,
            padding: '48 0 0 0',
            bodyStyle: 'width:100%',
            items: [tagsPanel, view, collectionsPanel],
            renderTo: Ext.getBody(),
            border: 0,
        });


    });


block body
  .title
    <br/>
    include navigator
    .container-fluid
