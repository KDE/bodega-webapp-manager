extends layout
block head

  title Partners
  link(rel="stylesheet", href="/css/ext-all.css")
  script(src='/js/ext-all.js')

  include partnerContacts.js
  include partnerPeople.js
  include partnerBanking.js
  include partnerRequest.js
  include partnerCreationForm.js

  script
    Ext.onReady(function() {
        var store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            storeId:'bodegaStore',
            fields:['id', 'name', 'email', 'publisher', 'distributor', 'points', 'people', 'links'],
            proxy: {
                type: 'ajax',
                url: '/json/partner/list',
                reader: {
                    type: 'json',
                    root: 'partners'
                }
            },
            listeners: {
                update: function(store, record, operation, eOpts ) {
                    console.log(record.raw)
                    record.raw.name = record.data.name;
                    record.raw.email = record.data.email;
                    record.raw.publisher = record.data.publisher;
                    record.raw.distributor = record.data.distributor;
                    record.raw.points = record.data.points;
                    record.raw.links = record.data.links;

                    Ext.Ajax.request({
                        url: '/json/partner/update/' + record.raw.id,
                        method: 'POST',
                        params: $.param(record.raw),
                        callback: function(response) {
                            store.load();
                        }
                    });
                }
            }
        });

        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit: 1,
            listeners: {
                beforeedit: function(edit, opt) {
                    if (opt.field === 'points' || opt.field === 'publisher' || opt.field === 'distributor') {
                        return false;
                    }
                }
            }
        });

        var bankActionRenderer = function(value,meta,record,rowIx,ColIx, store) {
            console.log(record)
            var users = record.data.people;
            for (var i in users) {
                if (users[i].email == '#{userName}' && users[i].roles.indexOf('Account Manager') != -1) {
                    return 'x-grid-center-icon';
                }
            }
            return 'x-hide-display';
        };

        var view = Ext.create('Ext.grid.Panel', {
            store: Ext.data.StoreManager.lookup('bodegaStore'),
            selType: 'checkboxmodel',
            inline: true,
            columns: [
                { header: 'Name',  dataIndex: 'name', field: {allowBlank: false}, flex: 1},
                { header: 'Email', dataIndex: 'email', field: {allowBlank: false}, flex: 1},
                {
                    header: 'Publisher',
                    dataIndex: 'publisher',
                    renderer: function(value, record) {
                        if (value) {
                            return Ext.String.format('Yes');
                        } else {
                            return Ext.String.format('<a onClick="loadPartnerRequest(\''+record.record.data.id+'\', \''+record.record.data.name+'\', \'publisher\')">Request</a>', value);
                        }
                    }
                }, {
                    header: 'Distributor',
                    dataIndex: 'distributor',
                    renderer: function(value, record) {
                        if (value) {
                            return Ext.String.format('Yes');
                        } else {
                            return Ext.String.format('<a onClick="loadPartnerRequest(\''+record.record.data.id+'\', \''+record.record.data.name+'\', \'distributor\')">Request</a>', value);
                        }
                    }
                },
                { header: 'Points', dataIndex: 'points', field: {xtype: 'numberfield', allowBlank: false}},
                {
                    xtype: 'actioncolumn',
                    width: 80,
                    items: [{
                        icon: '/css/contact.png',
                        tooltip: 'Edit contacts',
                        handler: function(grid, rowIndex, colIndex) {
                            loadPartnerContacts(store.getAt(rowIndex).data);
                        }
                    }, {
                        icon: '/css/people.png',
                        tooltip: 'Edit partner people',
                        handler: function(grid, rowIndex, colIndex) {
                            loadPartnerPeople(store.getAt(rowIndex).data);
                        }
                    }, {
                        icon: '/css/bank-account.png',
                        tooltip: 'Edit banking details people',
                        handler: function(grid, rowIndex, colIndex) {
                            loadPartnerBanking(store.getAt(rowIndex).data);
                        },
                        getClass: bankActionRenderer
                    }]
                }
            ],
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'top',
                items: [{
                    text: 'New Partner',
                    scope: this,
                    handler: function() {
                        showPartnerCreationForm(store);
                    }
                }, 'Search', {
                    xtype: 'textfield',
                    name: 'searchField',
                    hideLabel: true,
                    width: 200,
                    listeners: {
                        change: {
                            fn: function(){
                                store.clearFilter();

                                var search = view.down('textfield[name=searchField]').getValue();
                                store.filterBy(function (record) {
                                    //name containing the textfield value
                                    var name = record.get('name').toLowerCase();
                                    var email = record.get('email').toLowerCase();
                                    return name.indexOf(search) !== -1 || email.indexOf(search) !== -1;
                               });
                            },
                            scope: this,
                            buffer: 100
                        }
                    }
                }, {
                    xtype: 'button',
                    text: 'Delete Partners',
                    hidden: true,
                    handler: function() {
                        Ext.MessageBox.confirm('Delete', 'Are you sure you want to delete the selected items?', function(btn){
                            if(btn === 'yes'){
                                var s = view.getSelectionModel().getSelection();
                                selected = [];
                                Ext.each(s, function (item) {
                                    Ext.Ajax.request({
                                        url: '/json/partner/delete/' + item.data.id,
                                        success: function(response, opts) {
                                            var resp = JSON.parse(response.responseText);
                                            if (resp.success) {
                                                Ext.MessageBox.alert('', 'Partner deleted successfully.');
                                                store.reload();
                                            } else {
                                                Ext.MessageBox.alert('Error', 'Error in deleting the partnert.<br/>' + (resp.message ? resp.message : resp.error.type));
                                            }
                                        },
                                        failure: function(response, opts) {
                                            console.log('server-side failure with status code ' + response.status);
                                            Ext.MessageBox.alert('Error', 'Error in deleting the partner.');
                                        }
                                    });
                                });
                            }
                        });
                    }
                }, {
                    xtype: 'button',
                    text: 'Approve Partners',
                    hidden: !#{inManagementGroup},
                    handler: function() {
                        window.location.href = "/partner/approve";
                    }
                }]
            }],
            listeners: {
                selectionchange: function() {
                    var s = view.getSelectionModel().getSelection();
                    if (s.length > 0) {
                        view.dockedItems.get(1).items.get(3).show();
                    } else {
                        view.dockedItems.get(1).items.get(3).hide();
                    }
                }
            },
            columnWidth: 1,
            border: 0,
            plugins: [cellEditing],
            region: 'center'
        });

        var layout = Ext.create('Ext.Viewport', {
            width: '100%',
            layout: 'border',
            padding: '48 0 0 0',
            items: [view],
            renderTo: Ext.getBody(),
            border: 0
        });
    });


block body
  .title
    <br/>
    include navigator
    .container-fluid

